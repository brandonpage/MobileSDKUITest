#before_all do
#  setup_circle_ci
#end

lane :iOS do |options|
  run_type = options[:type]
  iphone = 'iPhone-7'
  os = '11-2'
  sim_name = 'testsim'
  xcode_path = '/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'

  if ENV.has_key?('JENKINS_URL')
    os = '11-0'
    xcode_path = '/Applications/Xcode9.app/Contents/Developer/Applications/Simulator.app'
  end

  system("xcrun simctl delete #{sim_name}") or puts "No old device to delete"
  sim_id = `xcrun simctl create #{sim_name} com.apple.CoreSimulator.SimDeviceType.#{iphone} com.apple.CoreSimulator.SimRuntime.iOS-#{os}`.delete("\n")

  Dir.chdir('../../') do
    generateApp('ios', run_type)
    app_name = "#{run_type}_iosApp"
    path = Dir.glob("tmp*").first.concat("/#{app_name}/")

    case run_type
      when 'native'
        bundle_name = 'com.salesforce.native-iosApp'
      when 'native_swift'
        bundle_name = 'com.salesforce.native-swift-iosApp'
      when 'react_native'
        path.concat('ios/')
        bundle_name = 'com.salesforce.react-native-iosApp'
      else
        path.concat('platforms/ios/')
        bundle_name = 'com.salesforce.'.concat(run_type)
    end

    # Start Simulator
    system("xcrun simctl boot #{sim_id}")
    system("open #{xcode_path} --args -CurrentDeviceUDID #{sim_id}")

    UI.important 'Build for Simulator'
    Dir.chdir(path) do
      if run_type == 'react_native'
        system('killall -9 node')
        system('npm start&')
      end
      system("xcodebuild build -scheme #{app_name} -workspace #{app_name}.xcworkspace -sdk iphonesimulator -derivedDataPath ./DerivedData | xcpretty --color --simple") or exit

      UI.important 'Install App on Simulator'
      system("xcrun simctl install booted ./DerivedData/Build/Products/Debug-iphonesimulator/#{app_name}.app")
    end

    Dir.chdir('iOS/') do
      UI.important 'Run Tests'
      begin
        scan(
            project: 'iOS/MobileSDKUITest.xcodeproj',
            scheme: 'MobileSDKUITest',
            device: "#{sim_name} (#{os.gsub('-', '.')})",
            output_directory: 'test_output',
            xcargs: "TEST_APP_BUNDLE=#{bundle_name}"
        )
      ensure
        system("xcrun simctl shutdown #{sim_name}")
        sleep 5
        system("xcrun simctl delete #{sim_name}")
      end
    end
  end
end

lane :android do |options|
  run_type = options[:type]
  app_name = (run_type == 'native') ? 'native_java' : run_type
  package_name = "com.salesforce.#{app_name}"

  Dir.chdir('../../') do
    generateApp('android', run_type)
    path = Dir.glob("tmp*").first.concat("/#{run_type}_androidApp/")

    case run_type
      when 'react_native'
        path.concat('android/')
      when 'hybrid_local', 'hybrid_remote'
        path.concat('platforms/android/')
    end

    Dir.chdir(path) do
      if run_type == 'react_native'
        system('killall -9 node')
        system('npm start&')
      end

      printSection 'Install App on Emulator'
      system('adb install app/build/outputs/apk/debug/app-debug.apk')
    end

    Dir.chdir('Android/') do
      printSection 'Run Tests'
      system("./gradlew -Pandroid.testInstrumentationRunnerArguments.packageName=#{package_name} connectedAndroidTest")
      #`./gradlew -Pandroid.testInstrumentationRunnerArguments.packageName=#{package_name} connectedAndroidTest`
    end
  end
end

# Helper Functions

def generateApp(os, type)
  system('rm -rf tmp*')
  system("./SalesforceMobileSDK-Package/test/test_force.js --os=#{os} --apptype=#{type}")
end

def printSection(message)
  UI.success ''
  UI.success  ''
  UI.success  '*****************************************************************************'
  UI.success  '*'
  UI.success  "*                            #{message}"
  UI.success  '*'
  UI.success  '*****************************************************************************'
  UI.success  ''
  UI.success  ''
end