#before_all do
#  setup_circle_ci
#end

lane :iOS do |options|
  run_type = options[:type]
  iphone = 'iPhone-8'
  os = '11-2'
  sim_name = 'test'

  if ENV.has_key?('JENKINS_URL')
    os = '11-0'
  end

  system("xcrun simctl delete \"test\" || echo \"remove device if exists\"")
  sim_id = `xcrun simctl create #{sim_name} com.apple.CoreSimulator.SimDeviceType.#{iphone} com.apple.CoreSimulator.SimRuntime.iOS-#{os}`

  Dir.chdir('../../') do
    generateApp('ios', run_type)
    app_name = "#{run_type}_iosApp"
    path = Dir.glob("tmp*").first.concat("/#{app_name}/")

    case run_type
      when 'native'
        bundle_name = 'com.salesforce.native-iosApp'
      when 'native_swift'
        bundle_name = 'com.salesforce.native-swift-iosApp'
      when 'react_native'
        system('npm start')
        bundle_name = 'com.salesforce.react_native.react-nativeiosApp'
      else
        path.concat('platforms/ios/')
        bundle_name = 'com.salesforce.'.concat(app_name)
    end

    Dir.chdir(path) do
      if run_type == 'react_native'
        system('react-native bundle --platform ios --dev false --entry-file index.js --bundle-output ios/main.jsbundle && react-native run-ios')
      else
        UI.important 'Build Again'
        system("xcodebuild build -scheme #{app_name} -workspace #{app_name}.xcworkspace -derivedDataPath ./DerivedData CODE_SIGN_IDENTITY="" -destination 'platform=iOS Simulator,name=#{sim_name},OS=11.0' CODE_SIGNING_REQUIRED=NO") or exit
        #xcodebuild(
        #    workspace: app_name + '.xcworkspace',
        #    scheme: app_name,
        #    sdk: 'iphonesimulator',
        #    derivedDataPath: './DerivedData'
        #)
        UI.important 'Simulator install'
        #system("ios-sim install ./DerivedData/Build/Products/Debug-iphonesimulator/#{app_name}.app --devicetypeid \"#{iphone.gsub(/[' ']/, '-')}, 11.0\"  --exit")
        system("xcrun simctl boot #{sim_id}")
        xcode_path = `xcode-select -p`
        #UI.important "Xcode path: #{xcode_path}"

        system("sudo xcode-select -s /Applications/Xcode8.3.1.app/Contents/Developer")

        #puts "ls path: " + `ls #{xcode_path}`
        puts "ls 8.3 path: " + `ls /Applications/Xcode8.3.1.app/Contents/Developer/`
        puts "ls 8.3 path2: " + `ls /Applications/Xcode8.3.1.app/Contents/Developer/Applications/`
        system("open /Applications/Xcode8.3.1.app/Contents/Developer/Applications/Simulator.app/")
        system("xcrun simctl install booted ./DerivedData/Build/Products/Debug-iphonesimulator/#{app_name}.app")
        system("xcrun simctl install booted #{bundle_name}")
      end
    end

    Dir.chdir('iOS/') do
      UI.important 'Run Tests'
      //#{os.gsub(/['-']/, '.')}
      system("xcodebuild -scheme MobileSDKUITest -destination 'platform=iOS Simulator,name=#{sim_name},OS=11-0' TEST_APP_BUNDLE=#{bundle_name} test") or exit

      #system("xcodebuild -scheme MobileSDKUITest TEST_APP_BUNDLE=#{bundle_name} test")

      #scan(
      #    project: 'iOS/MobileSDKUITest.xcodeproj',
      #    scheme: 'MobileSDKUITest',
      #    device: 'iPhone 8 (11.2)',
      #    test_without_building: true,
      #    output_directory: 'test_output',
      #    xcargs: "TEST_APP_BUNDLE=#{bundle_name}"
      #)
    end
  end
end

def generateApp(os, type)
  system('rm -rf tmp*')
  system("./SalesforceMobileSDK-Package/test/test_force.js --os=#{os} --apptype=#{type}")
end