opt_out_crash_reporting

lane :ios do |options|
  run_type = options[:type]
  UI.user_error!('Please specify run type.') unless(run_type)
  sfdx = options[:sfdx]
  skipRemoveApp = options[:skipRemoveApp]
  device = options[:device]
  ios = options[:ios]
  sim_name = 'testsim'
  xcode_path = '/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'

  if device
    device.gsub!(' ', '-')
  else
    device = 'iPhone-8'
  end

  if ios
    ios.slice!(0, 3)
    ios.gsub!('.', '-')
  else
    ios = '11-2'
  end

  system("xcrun simctl delete #{sim_name}") or puts "No old device to delete"
  sim_id = `xcrun simctl create #{sim_name} com.apple.CoreSimulator.SimDeviceType.#{device} com.apple.CoreSimulator.SimRuntime.iOS-#{ios}`.delete("\n")

  Dir.chdir('../../') do
    generateApp('ios', run_type, sfdx)
    app_name = "#{run_type}_iosApp"
    path = Dir.glob("tmp*").first.concat("/#{app_name}/")

    case run_type
      when 'native'
        bundle_name = 'com.salesforce.native-iosApp'
      when 'native_swift'
        bundle_name = 'com.salesforce.native-swift-iosApp'
      when 'react_native'
        path.concat('ios/')
        bundle_name = 'com.salesforce.react-native-iosApp'
      else
        path.concat('platforms/ios/')
        bundle_name = 'com.salesforce.'.concat(run_type)
    end

    begin
      # Start Simulator
      system("xcrun simctl boot #{sim_id}")
      system("open #{xcode_path} --args -CurrentDeviceUDID #{sim_id}")

      UI.header 'Build for Simulator'
      Dir.chdir(path) do
        if run_type == 'react_native'
          system('npm start&')
        end
        system("xcodebuild build -scheme #{app_name} -workspace #{app_name}.xcworkspace -sdk iphonesimulator -derivedDataPath ./DerivedData | xcpretty --color --simple") or exit

        UI.important 'Installing App on Simulator'
        system("xcrun simctl install booted ./DerivedData/Build/Products/Debug-iphonesimulator/#{app_name}.app")
      end

        Dir.chdir('iOS/') do
        destination = "#{sim_name} (" + `instruments -s devices | grep #{sim_name} | awk -F"[()]" '{print $2}'`.delete("\n") + ")"
        scan(
            project: 'iOS/SalesforceMobileSDK-UITest.xcodeproj',
            scheme: 'TestLogin',
            device: destination,
            output_directory: 'test_output',
            xcargs: "TEST_APP_BUNDLE=#{bundle_name}"
        )
        end
      ensure
        unless skipRemoveApp
          system("xcrun simctl shutdown #{sim_name}")
          sleep 3
          system("xcrun simctl delete #{sim_name}")
        end
      end
  end
end

lane :android do |options|
  run_type = options[:type]
  UI.user_error!('Please specify run type.') unless(run_type)
  sfdx = options[:sfdx]
  skipRemoveApp = options[:skipRemoveApp]
  app_name = (run_type == 'native') ? 'native_java' : run_type
  package_name = "com.salesforce.#{app_name}"

  Dir.chdir('../../') do
    #generateApp('android', run_type, sfdx)
    path = Dir.glob("tmp*").first.concat("/#{run_type}_androidApp/")

    case run_type
      when 'react_native'
        path.concat('android/')
      when 'hybrid_local', 'hybrid_remote'
        path.concat('platforms/android/')
    end

    Dir.chdir(path) do
      UI.important 'Installing App on Emulator'
      result = `adb install -r app/build/outputs/apk/debug/app-debug.apk`.split("\n").last.delete("\r")
      UI.user_error!('APK did not install successfully.') unless(result.eql? 'Success')

      if run_type == 'react_native'
        system('npm start&')
        sleep 10
        system("adb shell pm grant #{package_name} android.permission.SYSTEM_ALERT_WINDOW")
      end
    end

    Dir.chdir('Android/') do
      UI.header 'Run Tests'
      begin
        result = system("./gradlew -Pandroid.testInstrumentationRunnerArguments.packageName=#{package_name} connectedAndroidTest")
      ensure
        system('killall -9 java')
        unless skipRemoveApp
          system("adb uninstall #{package_name}")
          UI.crash!('Tests failed.') unless(result)
        end
      end
    end
  end
end

# Helper Functions

def generateApp(os, type, sfdx)
  system('rm -rf tmp*/')
  system('rm -rf Android/app/build/')
  system('killall -9 node')
  generate_command = "./SalesforceMobileSDK-Package/test/test_force.js --os=#{os} --apptype=#{type}"
  if sfdx
    generate_command.concat(' --use-sfdx')
  end
  result = system(generate_command)
  UI.user_error!('Test app was not successfully created.') unless(result)
end
