#before_all do
#  setup_circle_ci
#end

lane :iOS do |options|
  run_type = options[:type]
  iphone = 'iPhone-7'
  os = '11-2'
  sim_name = 'test2222s'

  if ENV.has_key?('JENKINS_URL')
    os = '11-0'
  end

  system("xcrun simctl delete \"test\" || echo \"remove device if exists\"")
  sim_id = `xcrun simctl create #{sim_name} com.apple.CoreSimulator.SimDeviceType.#{iphone} com.apple.CoreSimulator.SimRuntime.iOS-#{os}`

  puts "SIM ID: #{sim_id}"
  Dir.chdir('../../') do
    generateApp('ios', run_type)
    app_name = "#{run_type}_iosApp"
    path = Dir.glob("tmp*").first.concat("/#{app_name}/")

    case run_type
      when 'native'
        bundle_name = 'com.salesforce.native-iosApp'
      when 'native_swift'
        bundle_name = 'com.salesforce.native-swift-iosApp'
      when 'react_native'
        system('npm start')
        bundle_name = 'com.salesforce.react_native.react-nativeiosApp'
      else
        path.concat('platforms/ios/')
        bundle_name = 'com.salesforce.'.concat(app_name)
    end

    UI.important 'Simulator install'
    #system("ios-sim install ./DerivedData/Build/Products/Debug-iphonesimulator/#{app_name}.app --devicetypeid \"#{iphone.gsub(/[' ']/, '-')}, 11.0\"  --exit")
    system("xcrun simctl boot #{sim_id}")
    home_path = "/Users/iosadmin"
    puts "Home Path: #{home_path}"
    app_path = Dir.glob("#{home_path}/Library/Developer/Xcode/DerivedData/#{app_name}-*").first
    puts "path: #{app_path}"
    app_path.concat("/Build/Products/Debug-iphonesimulator/#{app_name}.app")
    puts "App Path!!!!! #{app_path}"
    #system("open /Applications/Xcode8.3.1.app/Contents/Developer/Applications/Simulator.app/")
    system("xcrun simctl install booted #{app_path}")
    system("xcrun simctl install booted #{bundle_name}")

    Dir.chdir('iOS/') do
      UI.important 'Run Tests'
      #system("xcodebuild -scheme MobileSDKUITest -destination 'platform=iOS Simulator,name=#{sim_name},OS=11.0' TEST_APP_BUNDLE=#{bundle_name} test") or exit
      #system("xcodebuild -scheme MobileSDKUITest -destination 'platform=iOS Simulator,id=#{sim_id}' TEST_APP_BUNDLE=#{bundle_name} test") or exit

      scan(
          project: 'iOS/MobileSDKUITest.xcodeproj',
          scheme: 'MobileSDKUITest',
          #device: sim_name,
          #test_without_building: true,
          output_directory: 'test_output',
          xcargs: "TEST_APP_BUNDLE=#{bundle_name}"
      )
    end
  end
end

def generateApp(os, type)
  system('rm -rf tmp*')
  system("./SalesforceMobileSDK-Package/test/test_force.js --os=#{os} --apptype=#{type}")
end